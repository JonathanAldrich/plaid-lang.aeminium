/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package plaid.apps.webserver;
import  java.net.ServerSocket;
import  java.lang.System;
import java.net.Socket;
import java.net.ServerSocket;
import java.net.InetAddress;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.System;



state HttpServer{
	
	var serverSocket;
	
	method start(portNumber){
		this <- WaitingHttpServer with{
			var serverSocket = java.net.ServerSocket.new(portNumber, 1, InetAddress.getByName("127.0.0.1"));
		};
		await();
	}
}

state WaitingHttpServer case of HttpServer{
	
	var inputStream;
	var outputStream;
	var socket;
	
	
	method stop(){
		serversocket.close();
		this <- HttpServer;
	}
	
	method await(){
		System.out.println("Waiting for request");
		while{ true }{
			System.out.println("Inside while");
			socket = this.serverSocket.accept();
			System.out.println("Connection accepted");
			inputStream = socket.getInputStream();
			System.out.println("Got input stream");
			outputStream = socket.getOutputStream();
			System.out.println("Got output stream");
	        var httpRequest = new Request{
	        	var inputStream = this.inputStream;
	        };
	        httpRequest.parse();
	        var response = new Response{
	        	var outputStream = this.outputStream;
	        	var request = httpRequest;
	        };
	        response.serveFileResource();
	        socket.close();
		};
	}
}

method main(){
	var httpServer = new HttpServer;
	httpServer.start(8080);
}

