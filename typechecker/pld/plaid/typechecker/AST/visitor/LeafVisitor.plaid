package plaid.typechecker.AST.visitor;

state LeafVisitor case of ASTVisitor {
	method visitApplication(node) {
		node.f.accept(this);
		node.arg.accept(this)
	}
	
	method visitAssignment(node) {
		if (!node.target.isNull()) {
			node.target.accept(this);
		};
		node.field.accept(this);
		node.value.accept(this)		
	}
	
	method visitCase(node) {
		node.qi.accept(this);
		node.x.accept(this);
		node.e.accept(this)
	}
	
	method visitChangeState(node) {
		node.e.accept(this);
		node.s.accept(this)
	}
	
	method visitCompilationUnit(node) {
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
		node.imports.accept(this)
	}
	
	method visitDeclList(node) {
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
	}
	
	method visitDereference(node) {
		node.left.accept(this);
		node.right.accept(this)
	}
	
	method visitDestructiveDereference(node) {
		node.left.accept(this);
		node.right.accept(this)
	}
	
	method visitFieldDecl(node) {
		node.f.accept(this);
		node.e.accept(this)
	}
	
	method visitID(node) {
	}
	
	method visitImportList(node) {
//		node.imports.map(fn (im) => {
//			im.accept(this)
//		});
	}
	
	method visitIntLiteral(node) {
	}
	
	method visitInvalidNode(node) {
	}
	
	method visitLambda(node) {
		node.x.accept(this);
		node.body.accept(this)
	}
	
	method visitLetBinding(node) {
		node.x.accept(this);
		node.exp.accept(this);
		node.body.accept(this)
	}
	
	method visitMatch(node) {
		node.e.accept(this);
		node.caseList.map(fn (c) => {
			c.accept(this)
		});
	}
	
	method visitMethodDecl(node) {
		node.body.accept(this);
		if (!node.arg.isNull()) {
			node.arg.accept(this);
		};
	}
	
	method visitNewInstance(node) {
		node.st.accept(this)
	}
	
	method visitNullNode(node) {
	}
	
	method visitQI(node) {
	}
	
	method visitStateDecl(node) {
		node.name.accept(this);
		node.stateDef.accept(this);
		if (!node.caseOf.isNull()) {
			node.caseOf.accept(this);
		};
	}
	
	method visitStringLiteral(node) {
	}
	
	method visitThrows(node) {
		node.throwableID.accept(this);
	}
	
	method visitUnitLiteral(node) {
	}
	
	method visitWith(node) {
		node.s1.accept(this);
		node.s2.accept(this)
	}
}