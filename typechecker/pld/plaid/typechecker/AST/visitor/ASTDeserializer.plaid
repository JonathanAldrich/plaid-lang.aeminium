package plaid.typechecker.AST.visitor;



import java.util.logging.*;
import java.io.*;
import java.net.URI;
import org.json.simple.JSONObject;
import org.json.simple.JSONArray;
import org.json.simple.JSONValue;


state ASTDeserializer {
     var /* Logger */ log = plaid.runtime.utils.LogUtils.getSimpleLogger("ASTDeserializer");
     var /* String */ TYPE = "plaidType$";
     val /* String */ filename;
     
     method getAST() {
        log.setLevel(Level.WARNING);
        log.info("Deserialize : " + filename);
        var root = JSONValue.parse(FileReader.new(filename));
        convertJSONtoPlaid(root);
     }
     
     method convertJSONtoPlaid(root) {
         match(root) {
             case JSONObject {
                 log.info("JSONObject");
                 createPlaidObjectFromJSONObject(root);
             }
             case JSONArray {
                 log.info("JSONArray");
                 createPlaidObjectFromJSONArray(root);
             }
             case java.lang.String {
                 log.info("JSON String: " + root);
                 root
             }
             case plaid.lang.False {
                 log.info("JSON False");
                 root
             }
             case plaid.lang.True {
                 log.info("JSON True");
                 root
             }
             case java.lang.Long {
                 log.info("JSON Integer: " + root);
                 root
             }
             default {
                log.sever("Found not supported JSON element" + root);
                unit
             }
         }
     }
     
     method createPlaidObjectFromJSONObject(json) {
         var plaidType = json.get(TYPE);
         var matched   = false;
         var obj       = unit;
         
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.Application") ) {
             log.info("Found Application");
             obj = new Application with {
                 val f   = convertJSONtoPlaid(json.get("f"));
                 val arg = convertJSONtoPlaid(json.get("arg"));
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.CompilationUnit") ) {
             log.info("Found CompilationUnit");
             obj = new CompilationUnit with {
                 val packageName = convertJSONtoPlaid(json.get("packageName"));
                 val sourceFile  = File.new(URI.new(json.get("sourceFile")));
                 var imports     = convertJSONtoPlaid(json.get("imports"));
                 var decls       = convertJSONtoPlaid(json.get("decls"));
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.DeclList") ) {
             log.info("Found DeclList");
             obj = new DeclList with {
                 val decls = convertJSONtoPlaid(json.get("decls"));
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.Dereference") ) {
             log.info("Found Dereference");
             obj = new Dereference with {
                 val left  = convertJSONtoPlaid(json.get("left"));
                 val right = convertJSONtoPlaid(json.get("right"));
             };
             matched = true;  
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.FieldDecl") ) {
             log.info("Found FieldDecl");
             obj = new FieldDecl with {
                 val f              = convertJSONtoPlaid(json.get("f"));
                 val abstractField  = convertJSONtoPlaid(json.get("abstractField")); 
                 val immutableField = convertJSONtoPlaid(json.get("immutableField"));
                 val e              = convertJSONtoPlaid(json.get("e"));
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.ImportList") ) {
             log.info("Found ImportList");
             obj = new ImportList with {
                 val imports = convertJSONtoPlaid(json.get("imports"));
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.ID") ) {
             log.info("Found ID");
             obj = new ID with {
                 val name = convertJSONtoPlaid(json.get("name"));
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.IntLiteral") ) {
             log.info("Found IntLiteral");
             obj = new IntLiteral with {
                 val integer = convertJSONtoPlaid(json.get("integer"));
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.Lambda") ) {
             log.info("Found Lambda");
             obj = new Lambda with {
                 val x    = convertJSONtoPlaid(json.get("x"));
                 val body = convertJSONtoPlaid(json.get("body"));
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.MethodDecl") ) {
             log.info("Found MethodDecl");
             obj = new MethodDecl with { 
                 val name            = convertJSONtoPlaid(json.get("name"));
                 val body            = convertJSONtoPlaid(json.get("body"));
                 val arg             = convertJSONtoPlaid(json.get("arg"));
                 val abstractMethod  = convertJSONtoPlaid(json.get("abstractMethod"));
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.QI") ) {
             log.info("Found QI");
             obj = new QI with { 
                 val qid = convertJSONtoPlaid(json.get("qid"));
             };  
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.StateDecl") ) {
             log.info("Found StateDecl" );
             obj = new StateDecl with {
                 val name     = convertJSONtoPlaid(json.get("name"));
                 val stateDef = convertJSONtoPlaid(json.get("stateDef"));
                 val isCaseOf = convertJSONtoPlaid(json.get("isCaseOf"));
                 val caseOf   = ifElse ( json.keySet().contains("caseOf") ) { 
                         log.info("Has caseOf"); 
                         convertJSONtoPlaid(json.get("caseOf")); 
                     }{ 
                         log.info("No caseOf"); 
                         unit 
                     };
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.StringLiteral") ) {
             log.info("Found StringLiteral");
             obj = new StringLiteral with {
                 val string = convertJSONtoPlaid(json.get("string"));
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.UnannotatedLetBinding") ) {
             log.info("Found UnannotatedLetBinding");
             obj = new UnannotatedLetBinding with {
                 val x       = convertJSONtoPlaid(json.get("x"));
                 val exp     = convertJSONtoPlaid(json.get("exp"));
                 val body    = convertJSONtoPlaid(json.get("body"));
                 val mutable = convertJSONtoPlaid(json.get("mutable"));
             };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.UnitLiteral") ) {
             log.info("Found UnitLiteral");
             obj = new UnitLiteral { };
             matched = true;
         };
         if  ( !matched && plaidType.equals("state plaid.typechecker.AST.With") ) {
             log.info("Found With");
             obj = new With with {
                 val s1 = convertJSONtoPlaid(json.get("s1"));
                 val s2 = convertJSONtoPlaid(json.get("s2"));
             };
             matched = true;
         };

         if ( !matched ) {
            log.sever("Cannot handle: " + plaidType);
         };
         obj;
     }

     method createPlaidObjectFromJSONArray(json) {
         var list = new List with { var head = new Nil; };
         var iter = json.iterator();
         while { iter.hasNext(); } {
             list.add(convertJSONtoPlaid(iter.next()));
         };
         list
     }

}