package plaid.typechecker.AST.visitor;

import plaid.typechecker.AST.visitor.ASTVisitor;
import plaid.typechecker.AST.*;

import java.utils.*;
import java.io.*;
import org.json.simple.JSONObject;
import org.json.simple.JSONArray;

state ASTSerializer case of ASTVisitor {
    var /* String */ TYPE = "plaidType$";
	var /* String */ filename;

    override method visitCompilationUnit(node) {
    	System.out.println(filename);
    	val cu = JSONObject.new();
        cu.put(TYPE, "state plaid.typechecker.AST.CompilationUnit");
        // source ile
        cu.put("sourceFile", node.sourceFile.toURI().toASCIIString());
        // package name
        val packageName = JSONArray.new();      
        node.packageName.map(fn (s) => {
            packageName.add(s);
        });
        cu.put("packageName", packageName);     
		// imports
		val importList = JSONObject.new();
		cu.put("imports", node.imports.accept(this));
        // decls
        val decls = JSONArray.new();
        node.decls.map(fn (decl) => {
            decls.add(decl.accept(this));
        });
        cu.put("decls", decls);

		var writer = FileWriter.new(filename);
		writer.write(cu.toString());
		writer.close();
        cu 
    }
    
    override method visitImportList(node) {
        val importList = JSONObject.new();
        importList.put(TYPE, "state plaid.typechecker.AST.ImportList");
        val imports = JSONArray.new();
		node.imports.map(fn (x) => {
			imports.add(x.accept(this));
		});
        importList.put("imports", imports);
        importList;
    }
    
    override method visitQI(node) {
        val qi = JSONObject.new();
        qi.put(TYPE, "state plaid.typechecker.AST.QI");
        val qid = JSONArray.new();
    	node.qid.map( fn (x) => {
            qid.add(x);
    	});
        qi.put("qid", qid);
        qi;
    }

    override method visitFieldDecl(node) {
        val decl = JSONObject.new();
        decl.put(TYPE, "state plaid.typechecker.AST.FieldDecl");
        decl.put("f", node.f.accept(this));
        // abstractField
        decl.put("abstractField", node.abstractField);
        // e
        decl.put("e", node.e.accept(this));
        // immutableField
        decl.put("immutableField", node.immutableField);

        decl;
    }

    override method visitMethodDecl(node) {
        val decl = JSONObject.new();
        decl.put(TYPE, "state plaid.typechecker.AST.MethodDecl");
        // name
        decl.put("name", node.name);
        // arg
        decl.put("arg", node.arg.accept(this));
        // abstractMethod
        decl.put("abstractMethod", node.abstractMethod);
        // body
        decl.put("body",node.body.accept(this));
        decl;
    }

    override method visitStateDecl(node) {
        val decl = JSONObject.new();
        decl.put(TYPE, "state plaid.typechecker.AST.StateDecl");
        // name
        decl.put("name", node.name.accept(this));
        // isCaseOf
        ifElse ( node.isCaseOf ) {
            decl.put("isCaseOf", true);
            decl.put("caseOf", node.caseOf.accept(this));
        }{ 
            decl.put("isCaseOf", false);
        };
        // stateDef
        decl.put("stateDef",  node.stateDef.accept(this));
        decl;
    }

    override method visitID(node) {
        val id = JSONObject.new();
        id.put(TYPE, "state plaid.typechecker.AST.ID");
        // name
        id.put("name", node.name);
        id;
    }

    override method visitDeclList(node) {
        val declList   = JSONObject.new();
        declList.put(TYPE, "state plaid.typecheker.AST.DeclList");
        val decls = JSONArray.new();
        node.decls.map( fn (decl) => {
            decls.add(decl.accept(this));
        });
        declList.put("decls", decls);
        declList;
    }

    override method visitWith(node) {
        var w = JSONObject.new();
        w.put(TYPE, "state plaid.typechecker.AST.With");
        w.put("s1", w.s1.accept(this));
        w.put("s2", w.s2.accept(this));
        w;
    }

    override method visitLetBinding(node) {
        var let = JSONObject.new();
        let.put(TYPE, "state plaid.typechecker.AST.UnannotatedLetBinding");
        // x
        let.put("x", node.x.accept(this));
        // mutable 
        let.put("mutable", node.mutable);
        // exp
        let.put("exp", node.exp.accept(this));
        // body
        let.put("body", node.body.accept(this));
        
        result = let;
    }
    
    override method visitUnitLiteral(node) {
        var u = JSONObject.new();
        u.put(TYPE,"state plaid.typechecker.AST.UnitLiteral");
        u;
    }

    override method visitIntLiteral(node) {
        var lit = JSONObject.new();
        lit.put(TYPE, "state plaid.typechecker.AST.IntLiteral");
        lit.put("integer", node.integer);
        lit;
    }

    override method visitStringLiteral(node) {
        var lit = JSONObject.new();
        lit.put(TYPE, "state plaid.typechecker.AST.StringLiteral");
        lit.put("string", node.string);
        lit;
    }

    override method visitApplication(node) {
        val app = JSONObject.new();
        app.put(TYPE, "state plaid.typechecker.AST.Application");
        // f
        app.put("f", node.f.accept(this));
        // arg        
        app.put("arg", node.arg.accept(this));
        app;
    }

    override method visitDereference(node) {
        val deref = JSONObject.new();
        deref.put(TYPE, "state plaid.typechecker.AST.Dereference");
        // left  
        deref.put("left", node.left.accept(this));
        // right
        deref.put("right", node.right.accept(this));
        deref;
    }

    override method visitLambda(node) {
        val lambda = JSONObject.new();
        lambda.put(TYPE, "state plaid.typechecker.AST.Lambda");
        lambda.put("x", node.x.accept(this));
        lambda.put("body", node.body.accept(this));
        lambda;
    }

    override method visitAssignment(node) {
        val assign = JSONObject.new();
        assign.put(TYPE, "state plaid.typechecker.AST.Assignment");
        // field
        node.field.accept(this);
        assign.put("field", result);
        // target
        node.target.accept(this);
        assign.put(result);
        // value 
        node.value.accept(this);
        assign.put("value", result);
        assign;
    }

    override method visitCase(node) {
        val c = JSONObject.new();
        c.put(TYPE, "state plaid.typechecker.AST.Case");
        c.put("x", node.x.accept(this));
        c.put("qi", node.qi.accept(this));
        c.put("e", node.e.accept(this));
        c.put("defaultCase", node.defaultCase);
        c.put("boundVar", node.boundVar);
        c;
    }

    override method visitChangeState(node) {
        val cs = JSONObject.new();
        cs.put(TYPE, "state plaid.typechecker.AST.ChangeState");
        cs.put("e", node.e.accept(this));
        cs.put("s", node.s.accept(this));
        cs;
    }

    override method visitMatch(node) {
        val m = JSONObject.new();
        m.put(TYPE, "state plaid.typechecker.AST.Match");
        m.put("e", node.e.accept(this));
        val caseList = JSONArray.new();
        node.caseList.map( fn (c) => {
            caseList.add(c.accept(this));
        });
        m.put("caseList", caseList);
        m;
    }

    override method visitNewInstance(node) {
        val newInst = JSONObject.new();
        newInst.put(TYPE, "state plaid.typechecker.AST.NewInstance");
        newInst.put("s", node.s.accept(this));
        newInst;
    }
}


