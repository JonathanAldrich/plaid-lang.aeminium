package plaid.typechecker.AST.visitor;

import plaid.typechecker.AST.visitor.ASTVisitor;
import plaid.typechecker.AST.FieldDecl;
import plaid.typechecker.AST.CompilationUnit;
import plaid.typechecker.AST.MethodDecl;

import java.utils.*;
import java.io.*;
import org.json.simple.JSONObject;
import org.json.simple.JSONArray;

state ASTSerializer case of ASTVisitor {
	var /* String */ filename;
	var /* JSONObject */ current;

    override method visitCompilationUnit(node) {
    	System.out.println(filename);
    	val cu = JSONObject.new();
        // source ile
        cu.put("sourceFile", node.sourceFile.toURI().toASCIIString());
        // package name
        val packageName = JSONArray.new();      
        node.packageName.map(fn (s) => {
            packageName.add(s);
        });
        cu.put("packageName", packageName);     
		// imports
		val importList = JSONObject.new();
		node.imports.accept(this);
		cu.put("imports", current);

		var writer = FileWriter.new(filename);
		writer.write(cu.toString());
		writer.close();
    }
    
    override method visitImportList(node) {
        val imports = JSONArray.new();
		node.imports.map(fn (x) => {
			x.accept(this);
            imports.add(current);
		});
        current = imports;
    }
    
    override method visitQI(node) {
        val qi = JSONArray.new();
    	node.qid.map( fn (x) => {
            qi.add(x);
    	});
        current = qi;
    }
}