package plaid.typechecker.AST.visitor;

// Move this to standard library

state MyListCell {
}

state MyNil case of MyListCell {
	method append(elem) {
		this <- MyCons with {
			var value = elem;
			var next = new MyNil;
		};
	}
	
	method remove(elem) {
		this;
	}
}

state MyCons case of MyListCell {
	var value;
	var next;
	
	method append(elem) {
		this.next.append(elem);
	}

	method remove(elem) {
		ifElse (value == elem) {
			next = next.remove(elem);
			next;
		} {
			next = next.remove(elem);
			this;
		};
	}
}

state MyList {
	var head;
	
	method prepend(elem) {
		this.head = new MyCons with { var value = elem; var next = this.head; };
	}
		
	method append(elem) {
		this.head.append(elem);
	}
	
	method remove(elem) {
		this.head = this.head.remove(elem);
	}
	
	method map(f) {
		new MyList with { var head = this.mapHelper(f, this.head); }
	}
	
	method mapHelper(f, curr) {
		match (curr) {
			case MyCons {
				val newVal = f(curr.value);
				new MyCons with { var value = newVal; var next = this.mapHelper(f, curr.next); }
			}
			case MyNil {
				curr
			}
		};
	}
}