package plaid.typechecker.AST.visitor;

import plaid.typechecker.AST.*;

state RewriteVisitor {
	var localVars = new MyList with { var head = new MyNil; };
	var stateVars = new MySet with { var head = new MySetNil; };

	method contains(vars, node) {
		var found = false;
		
		vars.map(fn (v) => {
			if (v == node) {
				found = true;
			};
		});
		
		found;
	}

	method visitAssignment(node) {
		if (node.target.isNull()) {
			if (!contains(localVars, node) /* && contains(stateVars, node)*/) {
				node.target = new ID { var name = "this$plaid"; };
			}
		};
		node.field.accept(this);
		node.value.accept(this);		
	}

	method visitCase(node) {
		if (!node.defaultCase && node.boundVar) {
			localVars.append(node.x);
		};
		
		node.qi.accept(this);
		node.x.accept(this);
		node.e.accept(this);
		
		localVars.remove(node.x);
	}
	
	method visitCompilationUnit(node) {
		node.decls.map(fn (decl) => {
			localVars.append(new ID { var name = decl.getName(); })
		});
		
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
		
		node.decls.map(fn (decl) => {
			localVars.remove(new ID { var name = decl.getName(); })
		});
	}

	method visitID(node) {
		if (!contains(localVars, node) /* && contains(stateVars, node)*/) {
			node <- Dereference with {
				left = new ID { var token = node.token; var name = "this$plaid"; };
				right = new ID { var token = node.token; var name = node.name; };
			};
			// node.accept(this);
		}
	}

	method visitLambda(node) {
		localVars.append(node.x);

		node.x.accept(this);
		node.body.accept(this);
		
		localVars.remove(node.x);
	}

	method visitMatch(node) {
		var changed = false;
		
		match (node.e) {
			case ID id {
				if (!contains(localVars, id) && contains(stateVars, id)) {
					node <- Dereference with {
						left = new ID { var token = node.token; var name = "this$plaid"; };
						right = node;
					};
					// node.accept(this);
					changed = true;
				}
			}
			default {
				// Do nothing
			}
		};
		
		if (!changed) {
			node.e.accept(this);
			node.caseList.map(fn (c) => {
				c.accept(this);
			});
		};
	}
	
	method visitMethodDecl(node) {
		if (!node.name.equals("main")) {
			localVars.append(node.arg);
		};
		
		node.body.accept(this);
		node.arg.accept(this);
		
		localVars.remove(node.arg);
	}

	method generateStateVars() {
		// TODO: How to implement this? Call the Java implementation?
		new MySet { var head = new MySetNil; };
	}

	method visitStateDecl(node) {
		stateVars = generateStateVars();
		
		node.name.accept(this);
		node.stateDef.accept(this);
		node.caseOf.accept(this);
		
		stateVars = new MySet { var head = new MySetNil; };
	}
	
	method visitApplication(node) {
		node.f.accept(this);
		node.arg.accept(this)
	}
	
	method visitChangeState(node) {
		node.e.accept(this);
		node.s.accept(this)
	}
	
	method visitDeclList(node) {
		node.decls.map(fn (decl) => {
			decl.accept(this)
		});
	}
	
	method visitDereference(node) {
		node.left.accept(this);
		node.right.accept(this)
	}
	
	method visitFieldDecl(node) {
		node.f.accept(this);
		node.e.accept(this)
	}
	
	method visitImportList(node) {
		node.imports.map(fn (im) => {
			im.accept(this)
		});
	}
	
	method visitIntLiteral(node) {
	}
	
	method visitInvalidNode(node) {
	}
	
	method visitLetBinding(node) {
		node.x.accept(this);
		node.exp.accept(this);
		node.body.accept(this)
	}
	
	method visitNewInstance(node) {
		node.st.accept(this)
	}
	
	method visitNullNode(node) {
	}
	
	method visitQI(node) {
	}
	
	method visitStringLiteral(node) {
	}
	
	method visitUnitLiteral(node) {
	}
	
	method visitWith(node) {
		node.s1.accept(this);
		node.s2.accept(this)
	}	
}