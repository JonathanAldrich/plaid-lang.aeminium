package plaid.typechecker.AST.visitor;

// Move this to standard library

// Extremely simple "set" implemented by a list with uniqueness guarantee

state MySetCell {
}

state MySetNil case of MySetCell {
	method append(elem) {
		this <- MySetCons with {
			var value = elem;
			var next = new MySetNil;
		};
	}
	
	method remove(elem) {
		this;
	}
}

state MySetCons case of MySetCell {
	var value;
	var next;
	
	method append(elem) {
		ifElse (value == elem) {
			/* Do nothing */
			0
		} {
			this.next.append(elem);
		}
	}
	
	method remove(elem) {
		ifElse (value == elem) {
			// As we guarantee uniqueness, this must be the only value that's equal to elem
			next;
		} {
			next = next.remove(elem);
			this;
		};
	}
}

state MySet {
	var head;
	
	method add(elem) {
		this.head.append(elem);
	}
	
	method remove(elem) {
		this.head = this.head.remove(elem);
	}

	method map(f) {
		new MySet with { var head = this.mapHelper(f, this.head); }
	}
	
	method mapHelper(f, curr) {
		match (curr) {
			case MySetCons {
				val newVal = f(curr.value);
				new MySetCons with { var value = newVal; var next = this.mapHelper(f, curr.next); }
			}
			case MySetNil {
				curr
			}
		};
	}
}

/*
method main() {
	var s = new MySet with { head = new MySetNil; };
	
	s.add(5);
	s.add(6);
	s.add(7);
	s.add(8);
	s.add(9);
	s.add(10);
	s.add(5);
	s.add(6);
	s.add(7);
	s.add(8);
	s.add(9);
	s.add(10);
	
	s.remove(8);
	s.remove(5);
	s.remove(10);
	
	s.map(fn (v) => { java.lang.System.out.println(v); });	
}
*/