package plaid.typechecker.AST.visitor.helper;

import java.util.HashMap;

state Context{
	
	val contextMap = java.util.HashMap.new();
	
	/**
	 * Returns associated PermType.
	 */
	method get(x){
		contextMap.get(x);
	}
	
	/**
	 * Puts a  PermType in context
	 */
	method put(x, permType){
		contextMap.put(x,permType);
	}
	
	/**
	 * Removes the type information from all PURE and SHARED references.
	 */
	method demote(){
		while{this.contextMap.keySet().iterator().hasNext()}{
			var x = this.contextMap.keySet().next();
			var permType = this.contextMap.get(x);
			var perm = permType.perm;
			var type = permType.type;
			//If PermTyps is PURE or SHARED remove all TypeInformations
			ifElse (perm == Permission.PURE || perm == Permission.SHARED){
				type.clearTypeInformation();
			} 
		}
	}
	
	/**
	 * Creates a copy of the context.
	 */
	method copy(){
		var copyContext = new Context;
		val iter = contextMap.keySet().iterator();
		while { iter.hasNext() } {
			var x = iter.next();
			var permType = contextMap.get(x);
			copyContext.put(x.copy(), permType.copy());
		}
	}
	
	/**
	 * Removes a permType from context
	 */
	method remove(x){
		contextMap.remove(x);
	}
}