package plaid.typechecker.AST;

state Type {
	val /*Set<ID>*/ typeAbbrevs;
	val /*Set<TypeDecl>*/ typeDecls;
	
	method unfold(gamma) {
		val iter = typeAbbrevs.iterator();
		while { iter.hasNext() } {
			val currTypeAbbrev = iter.next();
			val unfoldedType = gamma.getType(currTypeAbbrev).unfold(gamma);
			typeDecls.addAll(unfoldedType.getTypeDecls());
		};
	}
	
	/**
	 * Returns the intersection of the two types.
	 */
	method join(t2) {
		val intersectAbbrevs = java.util.HashSet.new();
		
		// we only need to iterate through one of the sets because all of the 
		// elements in the intersection of the two sets must be, by definition, 
		// in the first set
		val abbrevIter = this.typeAbbrevs.iterator();
		while { abbrevIter.hasNext() } {
			val currAbbrev = abbrevIter.next();
			if (t2.typeAbbrevs.contains(currAbbrev)) {
				intersectAbbrevs.add(currAbbrev);
			};
		};
		
		val intersectDecls = java.util.HashSet.new();
		
		val declIter = this.typeDecls.iterator();
		while { declIter.hasNext() } {
			val currDecl = declIter.next();
			if (t2.typeDecls.contains(currDecl)) {
				intersectDecls.add(currDecl);
			};
		};
		
		new Type{ val typeAbbrevs = intersectAbbrevs; 
				  val typeDecls = intersectDecls; };
	}
	
	/**
	 * Returns the union of the two types.
	 */
	method merge(t2) {
		val unionAbbrevs = java.util.HashSet.new();
		unionAbbrevs.addAll(this.typeAbbrevs);
		unionAbbrevs.addAll(t2.typeAbbrevs);
		
		val unionDecls = java.util.HashSet.new();
		unionDecls.addAll(this.typeDecls);
		unionDecls.addAll(t2.typeDecls);
		
		new Type { val typeAbbrevs = unionAbbrevs; val typeDecls = unionDecls; };
	}
	
	/**
	 * Compares two types for equality.  Two types are considered equal if, 
	 * after unfolding, they have the same type declarations.
	 */
	method ==(other) {
		// TODO: unfold the types
		
		// compare the declarations
		var different = false;
		var declIter = this.typeDecls.iterator();
		while { declIter.hasNext() } {
			val currDecl = declIter.next();
			if (!other.typeDecls.contains(declIter)) {
				different = true;
			};
		};
		
		ifElse (different) {
			false;
		}{
			declIter = other.typeDecls.iterator();
			while { declIter.hasNext() } {
				val currDecl = declIter.next();
				if (!this.typeDecls.contains(declIter)) {
					different = true;
				};
			};
			!different;
		};
	}

	/**
	 * Clear all TypeInformation from this type.
	 */
	method clearTypeInformation(){
		typeAbbrevs.clear();
		typeDecls.clear();
	}
}