package plaid.typechecker.AST;

import plaid.lang.*;

state ASTTranslator {
	method translateAST(root) {
		match(root) {
			case plaid.compilerjava.AST.Application {
				new Application with {
					val /*Token*/ token = root.getToken();
					val /*Expression*/ f = translateAST(root.getFunction());
					val /*Expression*/ arg = translateAST(root.getArg());
				};
			}
			case plaid.compilerjava.AST.Assignment {
				new Assignment with {
					val /*Token*/ token = root.getToken();
					val /*Expression*/ target = ifElse (root.hasTarget()) {
							translateAST(root.getTarget());
						} {
							new NullNode;
						};
					val /*ID*/ field = translateAST(root.getField());
					val /*Expression*/ value = translateAST(root.getValue());
				};
			}
			case plaid.compilerjava.AST.Case {
				new Case with {
					val /*Token*/ token = root.getToken();
					val /*QI*/ qi = translateAST(root.getQI());
					val /*ID*/ x = translateAST(root.getX());
					val /*Expression*/ e = translateAST(root.getE());
					val /*boolean*/ defaultCase = root.getDefaultCase();
					val /*boolean*/ boundVar = root.isBoundVar();
				};
			}
			case plaid.compilerjava.AST.ChangeState {
				new ChangeState with {
					val /*Token*/ token = root.getToken();
					val /*Expression*/ e = translateAST(root.getE());
					val /*State*/ s = translateAST(root.getState());
				};
			}
			case plaid.compilerjava.AST.CompilationUnit {
				new CompilationUnit with {
					val /*List<Decl>*/ decls = map(translateAST, root.getDecls());
					val /*List<String>*/ packageName = root.getPackageName();
					val /*ImportList*/ imports = translateAST(root.getImports());
					// TODO: ???
					val /*File*/ sourceFile = java.io.File.new(">>UNKNOWN<<");
				};
			}
			case plaid.compilerjava.AST.DeclList {
				new DeclList with {
					val /*Token*/ token = root.getToken();
					val /*List<Decl>*/ decls = map(translateAST, root.getDecls());
				};
			}
			case plaid.compilerjava.AST.Dereference {
				new Dereference with {
					val /*Token*/ token = root.getToken();
					val /*Expression*/ left = translateAST(root.getLeft());
					val /*ID*/ right = translateAST(root.getRight());
				};
			}
			case plaid.compilerjava.AST.FieldDecl {
				new FieldDecl with {
					val /*Token*/ token = root.getToken();
					val /*ID*/ f = translateAST(root.getF());
					val /*Expression*/ e = translateAST(root.getE());
					val /*boolean*/ abstractField = root.isAbstractField();
				};
			}
			case plaid.compilerjava.AST.ID {
				new ID with {
					val /*Token*/ token = root.getToken();
					val /*String*/ name = root.getName();
				};
			}
			case plaid.compilerjava.AST.ImportList {
				new ImportList with {
					val /*List<QualifiedID>*/ imports = map(translateAST, root.getImports());
					val /*Token*/ token = root.getToken();
				};
			}
			case plaid.compilerjava.AST.IntLiteral {
				new IntLiteral with {
					val /*Token*/ token = root.getToken();
					val /*int*/ integer = root.getValue();
				};
			}
			case plaid.compilerjava.AST.Lambda {
				new Lambda with {
					val /*Token*/ token = root.getToken();
					val /*ID*/ x = translateAST(root.getVar());
					val /*Expression*/ body = translateAST(root.getBody());
				};
			}
			case plaid.compilerjava.AST.LetBinding {
				new LetBinding with {
					val /*Token*/ token = root.getToken();
					val /*ID*/ x = translateAST(root.getX());
					val /*Expression*/ exp = translateAST(root.getExp());
					val /*Expression*/ body = translateAST(root.getBody());
					val /*boolean*/ mutable = root.isMutable();
				};
			}
			case plaid.compilerjava.AST.Match {
				new Match with {
					val /*Token*/ token = root.getToken();
					val /*Expression*/ e = translateAST(root.getE());
					val /*List<Case>*/ caseList = map(translateAST, caseList);
				};
			}
			case plaid.compilerjava.AST.MethodDecl {
				new MethodDecl with {
					val /*Token*/ token = root.getToken();
					val /*String*/ name = root.getName();
					val /*Expression*/ body = translateAST(root.getBody());
					val /*ID*/ arg = ifElse (root.hasArg()) {
							translateAST(root.getArg());
						} {
							new NullNode;
						};
					val /*boolean*/ abstractMethod = root.isAbstractMethod();
				};
			}
			case plaid.compilerjava.AST.NewInstance {
				new NewInstance with {
					val /*Token*/ token = root.getToken();
					val /*State*/ s = translateAST(root.getState());
				};
			}
			case plaid.compilerjava.AST.QI {
				new QI with {
					val /*Token*/ token = root.getToken();
					val /*List<String>*/ qid = root.getQID();
				};
			}
			case plaid.compilerjava.AST.StateDecl {
				new StateDecl with {
					val /*Token*/ token = root.getToken();
					val /*ID*/ name = new ID { var name = root.getName(); };
					val /*State*/ stateDef = translateAST(root.getStateDef());
					val /*boolean*/ isCaseOf = root.getIsCaseOf();
					val /*QI*/ caseOf = ifElse (root.getIsCaseOf()) {
							translateAST(root.getCaseOf());
						} {
							new NullNode;
						};
				};
			}
			case plaid.compilerjava.AST.StringLiteral {
				new StringLiteral with {
					val /*Token*/ token = root.getToken();
					val /*String*/ string = root.getString();
				};
			}
			case plaid.compilerjava.AST.UnitLiteral {
				new UnitLiteral with {
					val /*Token*/ token = root.getToken();
				};
			}
			case plaid.compilerjava.AST.With {
				new With with {
					val /*Token*/ token = root.getToken();
					val /*State*/ s1 = translateAST(root.getS1());
					val /*State*/ s2 = translateAST(root.getS2());
				};
			}
			default {
				// TODO: ???
				java.lang.System.out.print("Unknown AST node type: ");
				java.lang.System.out.println((root.getClass()).getSimpleName());
			}
		}
	}
}

// TODO: Refactor this into a Plaid List library
method map(f, list) {
	val iter = list.iterator();
	val newList = new plaid.lang.List with { var head = new plaid.lang.Nil; };
	while {iter.hasNext();} {
		newList.prepend(f(iter.next()));
	};
	newList
}

method main() {
	var javaAST = plaid.compilerjava.ParserCore.parse(java.io.FileInputStream.new(java.io.File.new("pld/rewriteTest.plaid")));
	val translator = new ASTTranslator;
	var plaidAST = translator.translateAST(javaAST);
	plaidAST.accept(new visitor.PrintVisitor);
	plaidAST.accept(new visitor.RewriteVisitor);
	plaidAST.accept(new visitor.PrintVisitor);
}