package plaid.typechecker.AST;

state UniquePermission case of Permission {
	override method isWritable() {
		true;
	}

	override method split(p2) {
		match(p2) {
			// unique => unique/none
			case UniquePermission {
				new Some{ val value = (p2, new NonePermission); };
			}
			// unique => full/pure
			case FullPermission {
				new Some{ val value = (p2, new PurePermission); };
			}
			// unique => shared/shared
			case SharedPermission {
				new Some{ val value = (p2, p2); };
			}
			// unique => immutable/immutable
			case ImmutablePermission {
				new Some{ val value = (p2, p2); };
			}
			// unique => pure/full
			case PurePermission {
				new Some{ val value = (p2, new FullPermission); };
			}
			// unique => none/unique
			case NonePermission {
				new Some{ val value = (p2, this); };
			}
			default {
				new None;
			}
		};
	}
	
	override method ==(p2) {
		match(p2) {
			case UniquePermission {
				true;
			}
			default {
				false;
			}
		};
	}
	
	override method merge(p2) {
		this;
	}
}