package plaid.typechecker.AST;

state ImportList case of ASTNode {
	val /*List<QualifiedID>*/ imports;
	val /*Token*/ token;
	
	method accept(v) {
		v.visitImportList(this)
	}
	
	method addStdLibrary() {
		var globals = ArrayList.new();
		globals.add("plaid");
		globals.add("lang");
		globals.add("globals");
		globals.add("*");
		
		var stdLib = ArrayList.new();
		stdLib.add("plaid");
		stdLib.add("lang");
		stdLib.add("*");
		
		// We don't want to have the same import twice
		var haveStdLib = false;
		var haveGlobals = false;
		val it = this.imports.iterator();
		while {it.hasNext() && !(haveStdLib && haveGlobals)} {
			var qi = it.next();
			if (qi.toString().equals("plaid.lang.*")) {
				haveStdLib = true;
			};
			if(qi.toString().equals("plaid.lang.globals.*")) {
				haveGlobals = true;
			};
		};
		if (!haveStdLib) {
			this.imports.add(new QI{
				val qid = stdLib;
			});
		};
		if (!haveGlobals) {
			this.imports.add(new QI{
				val qid = globals;
			});
		};
	}
}