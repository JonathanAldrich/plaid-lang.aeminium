/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package coreExamples.definedInTests;

//NOTE : These tests that can only be verified by inspection of the runtime

state A {
	val z;
	method a() { 1 }
}

state B = A { val z = 99; } with {
	method b() { 2 }
}

state C = A with {
	method c() { 3 }
}

state Bcase case of A {
	val z = 99;
	method b() { 2 }
	method tC() { this <- C { val z = z; } }
}

state Ccase case of A {
	method c() { 3 }
	method tB() { this <- B }
}

method main() {
	val aState = new A { z = 1; }; 
		// method a : defined in state A 
		// field z : anonymous
		
	val bState = new B;
		// method a : defined in state A
		// field z : defined in state B
		// method b : defined in state B 

	bState <- C;
		// method a : defined in state A
		// field z : defined in state B
		// method b : defined in state B 
		// method c : defined in state C

	val cState = new C { z = 2; };
		// method a : defined in state A
		// method c : defined in state C
		// field z : anonymous
		
	val bCaseState = new Bcase;
		// method a : defined in state A
		// field z : defined in state B
		// method b : defined in state B 
	bCaseState.tC();
		// method a : defined in state A
		// field z : Anonymous  (Or should this be defined in state A?)
		// method c : defined in state C
	
	val cCaseState = new Ccase { z = 2; };
		// method a : defined in state A
		// method c : defined in state C
		// field z : anonymous (Or should this be defined in state A?)
	cCaseState.tB();
		// Error z defined twice (Anonymous and B)  (Or should definition in B be seen as overriding definition from A?)
		
	val bState2 = new B;
	bState2 <- C { val z = 2; };
		// Error z defined twice (B and Anonymous)
	
	cState <- B;
		// Error z defined twice (Anonymous and B)

}