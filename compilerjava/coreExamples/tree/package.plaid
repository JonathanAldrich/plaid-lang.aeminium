/**
 * Copyright (c) 2010 The Plaid Group (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package coreExamples.tree;

import java.lang.System;

state Node { }

state BinaryNode case of Node {
	val value;
	var left;
	var right;
}

state Leaf case of Node {
	
}

state BinaryTree {
	var root = new Leaf;
	
	method insert(x) {
		match (this.root) {
			case Leaf {
				this.root = new BinaryNode{ val value = x; var left = new Leaf; var right = new Leaf; };
			}
			case BinaryNode {
				this.insertHelper(this.root, x);
			}
		};
	}
	
	method insertHelper(topNode, x) {
		match (topNode) {
			case BinaryNode {
				ifElse (x < topNode.value) {
					match (topNode.left) {
						case BinaryNode {
							this.insertHelper(topNode.left, x);
						}
						case Leaf {
							topNode.left = new BinaryNode{ val value = x; var left = new Leaf; var right = new Leaf; };
						}
					};
				}{ 
					ifElse (x > topNode.value) {
						match (topNode.right) {
							case BinaryNode {
								this.insertHelper(topNode.right, x);
							}
							case Leaf {
								topNode.right = new BinaryNode{ val value = x; var left = new Leaf; var right = new Leaf; };
							}
						};
					}{
						System.out.println("Duplicate nodes not allowed"); 
					};
				};
			}
			default {
				System.out.println("insertHelper method failed"); 
			}
		};
	}
	
	method contains(x) {
		match (this.root) {
			case Leaf {
				false;
			}
			case BinaryNode {
				this.containsHelper(this.root, x);
			}
		};
	}
	
	method containsHelper(node, x) {
		match (node) {
			case BinaryNode {
				ifElse (x < node.value) {
					this.containsHelper(node.left, x);
				}{
					ifElse (x > node.value) {
						this.containsHelper(node.right, x);
					}{
						if (x == node.value) {
							true;
						};
					};
				};
			}
			case Leaf {
				false;
			}
			default {
				java.lang.System.out.println("containsHelper failed.");
			}
		};
	}
}

method main() {
	var tree = new BinaryTree;
	tree.insert(1);
	java.lang.System.out.println("inserted 1");
	tree.insert(-3);
	java.lang.System.out.println("inserted -3");
	tree.insert(5);
	java.lang.System.out.println("inserted 5");
	if (tree.contains(1)) { java.lang.System.out.println("the tree contains 1"); };
	if (tree.contains(-3)) { java.lang.System.out.println("the tree contains -3"); };
	if (tree.contains(5)) { java.lang.System.out.println("the tree contains 5"); };
	if (tree.contains(-4)) { java.lang.System.out.println("the tree contains -4"); };
	if (tree.contains(-2)) { java.lang.System.out.println("the tree contains -2"); };
	if (tree.contains(2)) { java.lang.System.out.println("the tree contains 2"); };
	if (tree.contains(6)) { java.lang.System.out.println("the tree contains 6"); };
}
