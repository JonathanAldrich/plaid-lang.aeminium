//Stack

package coreExamples.stream;

import plaid.lang.*;

state Stack = List { var head = new Nil; } with {

  method isEmpty() {
    match (head) {
      case Nil { true; }
      case Cons { false; }
    };
  }
  
  method push(elem) {
    prepend(elem);
  }
  
  method pop() {
    match (head) {
      case Cons {
        val ret = head.value;
        head = head.next;
        ret;
      }
      default { } //return unit
    }
  }
  
  method peek() {
  	match(head) {
  	  case Cons {
  	    head.value;
  	  }
  	  default { } // return unit
  	}
  }

}

//Basic input stream 
//(ie it starts with some data and it can be read until it is empty, at which 
//point it can be closed)
state InputStream  { }

state ClosedStream case of InputStream { }

state OpenStream case of InputStream { }

state Within case of OpenStream {
  var data;
  method read() {
    val ret = data.pop(); //remove the first element
    if (data.peek() == -1) { this <- EOF }; //change state if now empty
    ret; //always return popped value
  }
}

state EOF case of OpenStream {
  method close() {
    this <- ClosedStream;
  }
}

method main() {
  var stack = new Stack;
  stack.push(-1); //EOF character
  stack.push(5);
  stack.push(4);
  stack.push(3);
  stack.push(2);
  stack.push(1);
  var stream = new Within { var data = stack; };

  while { 
  	match(stream) { 
  	  case EOF { false; }
  	  case Within { true; }
  	};
  }
  { java.lang.System.out.println(stream.read()); };
  
  stream.close(); //finish protocol
}